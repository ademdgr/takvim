# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

---------------------------------


from lightgbm import LGBMRegressor
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sklearn
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression, RidgeCV
from sklearn.svm import LinearSVR


-------------------------------


dftr = pd.read_csv('/kaggle/input/datathon2022/train.csv')
dfte = pd.read_csv('/kaggle/input/datathon2022/testFeatures.csv')
print(dftr.shape)
dftr.head(2)


---------------------------


dftr.columns



dftr['tarih']=dftr.tarih.str.replace('-','')
dftr.head(2)



for col in dftr.columns:
    print(col, ":", dftr[col].unique().shape[0])



dftr['tarih'] = dftr['tarih'].astype(float)



dftr.info()


corr = dftr.corr()
corr.style.background_gradient(cmap='coolwarm')


X_dftr = dftr.drop(columns='ürün fiyatı')
y = dftr['ürün fiyatı'].values



encoder = OneHotEncoder()
X = encoder.fit_transform(X_dftr.values)
X




for category in encoder.categories_:
    print(category[:50])



X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.1, random_state=2019
)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
##print(y_test.shape)




##

%%time
model = LinearRegression()
model.fit(X_train, y_train)




train_score = model.score(X_train, y_train)
test_score = model.score(X_test, y_test)

print("Train Score:", train_score)
print("Test Score:", test_score)



def compute_mse(model, X, y_true, name):
    y_pred = model.predict(X)
    mse = mean_squared_error(y_true, y_pred)
    print(f'Mean Squared Error for {name}: {mse}')
    
compute_mse(model, X_train, y_train, 'training set')
compute_mse(model, X_test, y_test, 'test set')





y_train.mean()




def build_evaluate_fn(X_train, y_train, X_test, y_test):
    def evaluate(model):
        train_score = model.score(X_train, y_train)
        test_score = model.score(X_test, y_test)

        print("Train Score:", train_score)
        print("Test Score:", test_score)
        print()
        
        compute_mse(model, X_train, y_train, 'training set')
        compute_mse(model, X_test, y_test, 'test set')
    
    return evaluate

evaluate = build_evaluate_fn(X_train, y_train, X_test, y_test)





##

%%time
svm = LinearSVR()
svm.fit(X_train, y_train);
### ikinci yöntem : svm :


##evaluate(svm)




%%time
gbr = LGBMRegressor(n_estimators=1000)
gbr.fit(X_train, y_train)



evaluate(gbr)




